#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

// 字符识别函数，识别并替换特殊乘号，并记录位置及后一位字符
void replaceSpecialMultiplication(char* expression, int* positions, char* next_chars) {
    int j = 0; // 用于记录特殊乘号的位置
    // 遍历表达式，识别并替换特殊乘号
    for (int i = 0; expression[i] != '\0'; i++) {
        // 判断是否为特殊乘号（对应的 ASCII 码值为 161）
        if ((unsigned char)expression[i] == 161) {
            // 将特殊乘号替换为普通的乘号 "*"
            expression[i] = '*';

            // 记录特殊乘号的位置
            positions[j] = i;

            // 记录特殊乘号位置的后一位字符
            if (expression[i + 1] != '\0') {
                next_chars[j] = expression[i + 1];
            }
            else {
                next_chars[j] = '\0';
            }

            j++;
        }
    }
}

// 将乘号后一位的字符替换为输入表达式中相应位置的字符
void replaceQuestionMarks(char* expression, char* input_expression, int* positions, char* next_chars) {
    int i = 0;
    while (positions[i] != -1) {
        if (next_chars[i] != '\0' && input_expression[positions[i] + 1] != '\0') {
            expression[positions[i] + 1] = input_expression[positions[i] + 1];
        }
        i++;
    }
}

int main() {
    char input_expression[100]; // 输入表达式
    char expression[100]; // 假设最大表达式长度为 100
    printf("请输入表达式：");
    fgets(input_expression, sizeof(input_expression), stdin); // 读取输入的表达式

    // 移除换行符
    if (input_expression[strlen(input_expression) - 1] == '\n') {
        input_expression[strlen(input_expression) - 1] = '\0';
    }

    strcpy(expression, input_expression); // 复制输入表达式到输出表达式

    int positions[100] = { 0 }; // 记录特殊乘号的位置，初始值为 0
    for (int i = 0; i < 100; i++) {
        positions[i] = -1; // 初始值设为 -1，表示无效位置
    }

    char next_chars[100]; // 记录特殊乘号位置的后一位字符
    for (int i = 0; i < 100; i++) {
        next_chars[i] = '\0'; // 初始值设为空字符，表示无效字符
    }

    // 识别并替换特殊乘号，并记录位置及后一位字符
    replaceSpecialMultiplication(expression, positions, next_chars);

    // 将乘号后一位的字符替换为输入表达式中相应位置的字符
    replaceQuestionMarks(expression, input_expression, positions, next_chars);

    // 输出替换后的表达式
    printf("替换后的表达式：%s\n", expression);

    return 0;
}
